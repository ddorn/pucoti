name: Build and Release Webapp

on:
  push:
    branches: ["main"]
    paths:
      - "webapp/**"
      - ".github/workflows/build.yml"
  workflow_dispatch:

jobs:
  build_and_package:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    defaults:
      run:
        working-directory: pucoti/webapp

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"

      - name: Install OS dependencies
        run: |
          if [ "${{ runner.os }}" = "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y jq libfuse2
          elif [ "${{ runner.os }}" = "macOS" ]; then
            brew install jq
          elif [ "${{ runner.os }}" = "Windows" ]; then
            winget install -e --id jqlang.jq
            echo "C:\\Program Files\\jq" >> $GITHUB_PATH
          fi
        shell: bash

      - name: Install dependencies
        run: pnpm install --dir www

      - name: Build Vue App (www)
        run: pnpm run build-only --dir www

      - name: Build Neutralino App
        run: pnpm exec neu build

      - name: Package Linux Build
        if: runner.os == 'Linux'
        run: |
          CONF=./neutralino.config.json
          APP_NAME=$(jq -r '.buildScript.linux.appName' $CONF)
          APP_BINARY=$(jq -r '.cli.binaryName' $CONF)
          APP_VERSION=$(jq -r '.version' $CONF)
          APP_ICON=$(jq -r '.buildScript.linux.appIcon' $CONF)

          BUILD_DIR="./dist/linux_x64/${APP_NAME}"
          EXE_SRC="./dist/${APP_BINARY}/${APP_BINARY}-linux_x64"
          RES_SRC="./dist/${APP_BINARY}/resources.neu"
          EXT_SRC="./dist/${APP_BINARY}/extensions"
          SCAFFOLD_DESKTOP="./packaging/app_scaffolds/linux/myapp.desktop"

          mkdir -p "${BUILD_DIR}"
          cp "${EXE_SRC}" "${BUILD_DIR}/"
          cp "${RES_SRC}" "${BUILD_DIR}/"
          cp "${APP_ICON}" "${BUILD_DIR}/$(basename ${APP_ICON})"\
          cp "${SCAFFOLD_DESKTOP}" "${BUILD_DIR}/${APP_NAME}.desktop"
          if [ -d "${EXT_SRC}" ]; then cp -r "${EXT_SRC}" "${BUILD_DIR}/"; fi

          sed -i "s/{APP_NAME}/${APP_NAME}/g" "${BUILD_DIR}/${APP_NAME}.desktop"
          sed -i "s/{APP_ICON_LOCATION}/$(basename ${APP_ICON})/g" "${BUILD_DIR}/${APP_NAME}.desktop"
          sed -i "s|{APP_EXEC}|/${APP_BINARY}-linux_x64|g" "${BUILD_DIR}/${APP_NAME}.desktop"

          echo "#!/bin/sh" > "${BUILD_DIR}/AppRun"
          echo "HERE=\$(dirname \"\$(readlink -f \"\${0}\")\")" >> "${BUILD_DIR}/AppRun"
          echo "cd \"${HERE}\" && ./${APP_BINARY}-linux_x64 \"\$@\"" >> "${BUILD_DIR}/AppRun"
          chmod +x "${BUILD_DIR}/AppRun"

          wget -q "https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage" -O ./appimagetool
          chmod +x ./appimagetool

          FINAL_APPIMAGE_NAME="${APP_NAME}-${APP_VERSION}-linux-x64.AppImage"
          ARCH=x86_64 ./appimagetool --no-appstream "${BUILD_DIR}" "./dist/${FINAL_APPIMAGE_NAME}"

      - name: Package macOS Build
        if: runner.os == 'macOS'
        run: |
          CONF=./neutralino.config.json
          APP_NAME=$(jq -r '.buildScript.mac.appName' $CONF)
          APP_VERSION=$(jq -r '.version' $CONF)
          APP_BINARY=$(jq -r '.cli.binaryName' $CONF)
          APP_ID=$(jq -r '.buildScript.mac.appIdentifier' $CONF)
          APP_ICON=$(jq -r '.buildScript.mac.appIcon' $CONF)
          APP_MIN_OS=$(jq -r '.buildScript.mac.minimumOS' $CONF)
          APP_BUNDLE_NAME=$(jq -r '.buildScript.mac.appBundleName' $CONF)

          APP_BUNDLE_DIR="./dist/mac_x6
