name: Build and Release Pucoti

on:
  push:
    branches: ["main"]
    paths:
      - "webapp/**"
      - ".github/workflows/build.yml"
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: macos-latest
            platform: mac
            arch: x64
          - os: macos-14
            platform: mac
            arch: arm64

    defaults:
      run:
        working-directory: webapp

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          cache-dependency-path: webapp/www/pnpm-lock.yaml

      - name: Install system dependencies
        run: |
          if [ "${{ runner.os }}" = "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y jq libfuse2 file
          elif [ "${{ runner.os }}" = "macOS" ]; then
            brew install jq
          fi

      - name: Install frontend dependencies
        run: |
          cd www
          pnpm install

      - name: Build frontend
        run: |
          cd www
          pnpm run build

      - name: Configure build for current architecture
        run: |
          if [ "${{ matrix.platform }}" = "mac" ]; then
            jq ".buildScript.mac.architecture = [\"${{ matrix.arch }}\"]" neutralino.config.json > temp.json
            mv temp.json neutralino.config.json
          elif [ "${{ matrix.platform }}" = "linux" ]; then
            jq ".buildScript.linux.architecture = [\"${{ matrix.arch }}\"]" neutralino.config.json > temp.json
            mv temp.json neutralino.config.json
          fi

      - name: Build Neutralino app
        run: pnpx @neutralinojs/neu build --release

      - name: Package Linux build
        if: matrix.platform == 'linux'
        run: |
          # Read config values
          APP_NAME=$(jq -r '.buildScript.linux.appName' neutralino.config.json)
          APP_BINARY=$(jq -r '.cli.binaryName' neutralino.config.json)
          APP_VERSION=$(jq -r '.version' neutralino.config.json)
          APP_ICON=$(jq -r '.buildScript.linux.appIcon' neutralino.config.json)

          # Create build directory
          BUILD_DIR="./dist/linux_${{ matrix.arch }}/${APP_NAME}"
          mkdir -p "${BUILD_DIR}"

          # Copy binary and resources
          cp "./dist/${APP_BINARY}/${APP_BINARY}-linux_${{ matrix.arch }}" "${BUILD_DIR}/"
          cp "./dist/${APP_BINARY}/resources.neu" "${BUILD_DIR}/"

          # Copy extensions if they exist
          if [ -d "./dist/${APP_BINARY}/extensions" ]; then
            cp -r "./dist/${APP_BINARY}/extensions" "${BUILD_DIR}/"
          fi

          # Copy icon
          echo "Looking for icon at: ${APP_ICON}"
          if [ -f "${APP_ICON}" ]; then
            echo "Icon found, copying to build directory"
            cp "${APP_ICON}" "${BUILD_DIR}/"
          else
            echo "Warning: Icon file ${APP_ICON} not found"
            ls -la packaging/icons/ || echo "packaging/icons/ directory not found"
          fi

          # Create desktop file
          cat > "${BUILD_DIR}/${APP_NAME}.desktop" << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=${APP_NAME}
Icon=${APP_NAME}
Exec=${APP_BINARY}-linux_${{ matrix.arch }}
Categories=Utility;
EOF

          # Create AppImage structure
          APPDIR="${APP_NAME}.AppDir"
          rm -rf "${APPDIR}"
          mkdir -p "${APPDIR}/usr/bin"
          mkdir -p "${APPDIR}/usr/share/applications"
          mkdir -p "${APPDIR}/usr/share/icons/hicolor/256x256/apps"

          # Copy files to AppDir
          cp "${BUILD_DIR}/${APP_BINARY}-linux_${{ matrix.arch }}" "${APPDIR}/usr/bin/"
          cp "${BUILD_DIR}/resources.neu" "${APPDIR}/usr/bin/"

          if [ -d "${BUILD_DIR}/extensions" ]; then
            cp -r "${BUILD_DIR}/extensions" "${APPDIR}/usr/bin/"
          fi

          # Create clean desktop file for AppImage (without problematic keys)
          cat > "${APPDIR}/${APP_NAME}.desktop" << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=${APP_NAME}
Icon=${APP_NAME}
Exec=${APP_BINARY}-linux_${{ matrix.arch }}
Categories=Utility;
EOF

          cp "${APPDIR}/${APP_NAME}.desktop" "${APPDIR}/usr/share/applications/"

          if [ -f "${APP_ICON}" ]; then
            echo "Copying icon to AppDir"
            cp "${APP_ICON}" "${APPDIR}/usr/share/icons/hicolor/256x256/apps/${APP_NAME}.png"
            cp "${APP_ICON}" "${APPDIR}/${APP_NAME}.png"
          elif [ -f "${BUILD_DIR}/$(basename ${APP_ICON})" ]; then
            echo "Using icon from build directory"
            cp "${BUILD_DIR}/$(basename ${APP_ICON})" "${APPDIR}/usr/share/icons/hicolor/256x256/apps/${APP_NAME}.png"
            cp "${BUILD_DIR}/$(basename ${APP_ICON})" "${APPDIR}/${APP_NAME}.png"
          else
            echo "Warning: No icon found, creating placeholder"
            # Create a simple placeholder PNG
            echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==" | base64 -d > "${APPDIR}/${APP_NAME}.png"
            cp "${APPDIR}/${APP_NAME}.png" "${APPDIR}/usr/share/icons/hicolor/256x256/apps/${APP_NAME}.png"
          fi

          # Create AppRun script
          cat > "${APPDIR}/AppRun" << EOF
#!/bin/bash
HERE="\$(dirname "\$(readlink -f "\${0}")")"
export PATH="\${HERE}/usr/bin:\${PATH}"
cd "\${HERE}/usr/bin"
exec "./${APP_BINARY}-linux_${{ matrix.arch }}" "\$@"
EOF
          chmod +x "${APPDIR}/AppRun"

          # Debug: List AppDir contents before creating AppImage
          echo "AppDir contents:"
          find "${APPDIR}" -type f -ls

          # Create AppImage
          if [ "${{ matrix.arch }}" = "x64" ]; then
            wget -q "https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage" -O appimagetool
            chmod +x appimagetool
            ARCH=x86_64 ./appimagetool --no-appstream "${APPDIR}" "dist/${APP_NAME}-${APP_VERSION}-linux-${{ matrix.arch }}.AppImage"
          else
            echo "AppImage creation skipped for ${{ matrix.arch }} architecture"
          fi

      - name: Package macOS build
        if: matrix.platform == 'mac'
        run: |
          # Read config values
          APP_NAME=$(jq -r '.buildScript.mac.appName' neutralino.config.json)
          APP_VERSION=$(jq -r '.version' neutralino.config.json)
          APP_BINARY=$(jq -r '.cli.binaryName' neutralino.config.json)
          APP_ID=$(jq -r '.buildScript.mac.appIdentifier' neutralino.config.json)
          APP_ICON=$(jq -r '.buildScript.mac.appIcon' neutralino.config.json)
          APP_MIN_OS=$(jq -r '.buildScript.mac.minimumOS' neutralino.config.json)
          APP_BUNDLE_NAME=$(jq -r '.buildScript.mac.appBundleName' neutralino.config.json)

          # Create app bundle structure
          APP_BUNDLE_DIR="./dist/mac_${{ matrix.arch }}/${APP_NAME}.app"
          MACOS_DIR="${APP_BUNDLE_DIR}/Contents/MacOS"
          RESOURCES_DIR="${APP_BUNDLE_DIR}/Contents/Resources"

          mkdir -p "${MACOS_DIR}"
          mkdir -p "${RESOURCES_DIR}"

          # Copy binary and resources
          cp "./dist/${APP_BINARY}/${APP_BINARY}-mac_${{ matrix.arch }}" "${MACOS_DIR}/main"
          chmod +x "${MACOS_DIR}/main"
          cp "./dist/${APP_BINARY}/resources.neu" "${RESOURCES_DIR}/"

          # Copy extensions if they exist
          if [ -d "./dist/${APP_BINARY}/extensions" ]; then
            cp -r "./dist/${APP_BINARY}/extensions" "${RESOURCES_DIR}/"
          fi

          # Copy icon
          if [ -f "${APP_ICON}" ]; then
            cp "${APP_ICON}" "${RESOURCES_DIR}/icon.icns"
          else
            echo "Warning: Icon file ${APP_ICON} not found"
          fi

          # Create bootstrap script
          cat > "${MACOS_DIR}/bootstrap" << 'EOF'
#!/usr/bin/env bash
MACOS="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
CONTENTS="$(dirname "$MACOS")"
exec "${MACOS}/main" --path="${CONTENTS}/Resources" --enable-extensions=true
EOF
          chmod +x "${MACOS_DIR}/bootstrap"

          # Create Info.plist
          cat > "${APP_BUNDLE_DIR}/Contents/Info.plist" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>NSHighResolutionCapable</key>
    <true/>
    <key>CFBundleExecutable</key>
    <string>bootstrap</string>
    <key>CFBundleGetInfoString</key>
    <string>${APP_NAME}</string>
    <key>CFBundleIconFile</key>
    <string>icon.icns</string>
    <key>CFBundleIdentifier</key>
    <string>${APP_ID}</string>
    <key>CFBundleName</key>
    <string>${APP_BUNDLE_NAME}</string>
    <key>CFBundleShortVersionString</key>
    <string>${APP_VERSION}</string>
    <key>CFBundleGetInfoString</key>
    <string>${APP_NAME} ${APP_VERSION}</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>LSMinimumSystemVersion</key>
    <string>${APP_MIN_OS}</string>
    <key>NSAppTransportSecurity</key>
    <dict>
        <key>NSAllowsArbitraryLoads</key>
        <true/>
    </dict>
</dict>
</plist>
EOF

          # Clear extended attributes and fix permissions
          find "${APP_BUNDLE_DIR}" -type f -exec chmod 644 {} \;
          find "${APP_BUNDLE_DIR}" -type d -exec chmod 755 {} \;
          chmod +x "${MACOS_DIR}/bootstrap"
          chmod +x "${MACOS_DIR}/main"

          # Remove quarantine attributes that might cause Gatekeeper issues
          xattr -cr "${APP_BUNDLE_DIR}" 2>/dev/null || true

          # Ad-hoc code sign the app to prevent Gatekeeper issues
          echo "Code signing the app bundle..."
          codesign --force --deep --sign - "${APP_BUNDLE_DIR}" || echo "Code signing failed, continuing anyway"

          # Verify the app structure
          echo "App bundle structure:"
          find "${APP_BUNDLE_DIR}" -type f -exec ls -la {} \;

          # Create zip archive (preserve permissions and avoid extra attributes)
          cd "./dist/mac_${{ matrix.arch }}"

          # Create zip without extended attributes
          export COPYFILE_DISABLE=1
          zip -r -X "../${APP_NAME}-${APP_VERSION}-macOS-${{ matrix.arch }}.zip" "${APP_NAME}.app"

          echo "Created macOS package: ${APP_NAME}-${APP_VERSION}-macOS-${{ matrix.arch }}.zip"

          # Create user instructions
          cat > "../MACOS_INSTALL_INSTRUCTIONS.txt" << 'EOF'
          PUCOTI - macOS Installation Instructions
          ========================================

          If you get a "damaged or incomplete" error when opening the app:

          Method 1 (Recommended):
          1. Right-click on the Pucoti.app and select "Open"
          2. Click "Open" in the security dialog
          
          Method 2 (Command Line):
          1. Open Terminal
          2. Run: sudo xattr -rd com.apple.quarantine /path/to/Pucoti.app
          3. Replace /path/to/Pucoti.app with the actual path
          
          Method 3 (System Preferences):
          1. Go to System Preferences > Security & Privacy > General
          2. Click "Open Anyway" after the first attempt to open the app
          
          This happens because the app is not notarized by Apple.
          The app is safe to run - it's built from open source code.
          EOF

      - name: Upload Linux artifacts
        if: matrix.platform == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: pucoti-linux-${{ matrix.arch }}
          path: |
            webapp/dist/*.AppImage
          retention-days: 30

      - name: Upload macOS artifacts
        if: matrix.platform == 'mac'
        uses: actions/upload-artifact@v4
        with:
          name: pucoti-macos-${{ matrix.arch }}
          path: |
            webapp/dist/*.zip
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Pucoti v${{ github.run_number }}
          draft: false
          prerelease: true

      - name: Upload Release Assets
        run: |
          for dir in artifacts/*/; do
            for file in "$dir"*; do
              if [ -f "$file" ]; then
                echo "Uploading $file"
                curl \
                  -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Content-Type: application/octet-stream" \
                  --data-binary @"$file" \
                  "${{ steps.create_release.outputs.upload_url }}?name=$(basename "$file")"
              fi
            done
          done
