name: Build Cross-Platform Apps

on:
  push:
    branches: [main, develop]
    paths:
      - 'webapp/**'
      - '.github/workflows/build-apps.yml'
    tags:
      - 'v*'
  pull_request:
    branches: [main]
    paths:
      - 'webapp/**'
      - '.github/workflows/build-apps.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            shell: bash
          - os: windows-latest
            platform: win
            shell: bash
          - os: macos-latest
            platform: mac
            shell: bash
    
    defaults:
      run:
        working-directory: webapp
        shell: ${{ matrix.shell }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y jq wget fuse libfuse2 desktop-file-utils

      - name: Install system dependencies (Windows)
        if: matrix.platform == 'win'
        run: |
          # Install jq for JSON parsing
          choco install jq -y

      - name: Install system dependencies (macOS)
        if: matrix.platform == 'mac'
        run: |
          # jq should already be available on macOS runners
          echo "macOS dependencies ready"

      - name: Install Neutralino CLI
        run: npm install -g @neutralinojs/neu

      - name: Install frontend dependencies
        run: |
          cd www
          pnpm install

      - name: Copy build scripts
        run: |
          git clone https://github.com/hschneider/neutralino-build-scripts.git build-scripts
          cp build-scripts/build-${{ matrix.platform }}.sh ./
          cp build-scripts/preproc-${{ matrix.platform }}.sh ./
          cp build-scripts/postproc-${{ matrix.platform }}.sh ./
          cp -r build-scripts/_app_scaffolds ./
          chmod +x build-${{ matrix.platform }}.sh preproc-${{ matrix.platform }}.sh postproc-${{ matrix.platform }}.sh

      - name: Build Neutralino app
        run: ./build-${{ matrix.platform }}.sh

      - name: Download AppImage tools (Linux)
        if: matrix.platform == 'linux'
        run: |
          mkdir -p appimage-tools
          cd appimage-tools
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage appimagetool-x86_64.AppImage

      - name: Create AppImages (Linux)
        if: matrix.platform == 'linux'
        run: |
          cd dist

          # Create AppImage for x64
          if [ -d "linux_x64" ]; then
            mkdir -p appimage-x64/usr/bin
            mkdir -p appimage-x64/usr/share/applications
            mkdir -p appimage-x64/usr/share/icons/hicolor/256x256/apps

            # Copy binary and resources
            cp linux_x64/Pucoti/pucoti-linux_x64 appimage-x64/usr/bin/pucoti
            cp linux_x64/Pucoti/resources.neu appimage-x64/usr/bin/
            if [ -d "linux_x64/Pucoti/extensions" ]; then
              cp -r linux_x64/Pucoti/extensions appimage-x64/usr/bin/
            fi

            # Copy icon and desktop file
            cp linux_x64/Pucoti/pucoti.png appimage-x64/usr/share/icons/hicolor/256x256/apps/pucoti.png
            cp linux_x64/Pucoti/Pucoti.desktop appimage-x64/usr/share/applications/pucoti.desktop

            # Update desktop file for AppImage
            sed -i 's|Exec=.*|Exec=pucoti|g' appimage-x64/usr/share/applications/pucoti.desktop
            sed -i 's|Icon=.*|Icon=pucoti|g' appimage-x64/usr/share/applications/pucoti.desktop
            sed -i '/^Encoding=/d' appimage-x64/usr/share/applications/pucoti.desktop
            echo "Categories=Utility;" >> appimage-x64/usr/share/applications/pucoti.desktop

            # Create AppRun script
            cat > appimage-x64/AppRun << 'EOF'
          #!/bin/bash
          SELF=$(readlink -f "$0")
          HERE=${SELF%/*}
          export PATH="${HERE}/usr/bin/:${PATH}"
          cd "${HERE}/usr/bin"
          exec "${HERE}/usr/bin/pucoti" "$@"
          EOF
            chmod +x appimage-x64/AppRun

            # Create desktop file in root
            cp appimage-x64/usr/share/applications/pucoti.desktop appimage-x64/

            # Create icon link in root
            ln -sf usr/share/icons/hicolor/256x256/apps/pucoti.png appimage-x64/pucoti.png

            # Build AppImage
            ARCH=x86_64 ../appimage-tools/appimagetool-x86_64.AppImage appimage-x64 pucoti-linux-x64.AppImage
          fi

      - name: Create macOS installation guides
        if: matrix.platform == 'mac'
        run: |
          cd dist
          
          # Create installation guide for each macOS build
          for dir in mac_x64 mac_arm64 mac_universal; do
            if [ -d "$dir" ]; then
              cat > "$dir/INSTALLATION_GUIDE.md" << 'EOF'
          # Pucoti macOS Installation Guide

          ## ⚠️ Important Security Note

          This application is currently **unsigned**, which means macOS will prevent it from running by default. This is normal for independently distributed applications and doesn't indicate any security risk with Pucoti itself.

          ## Installation Steps

          ### Step 1: Extract the Application
          1. Download and extract the zip file
          2. Move `pucoti.app` to your Applications folder (optional but recommended)

          ### Step 2: Remove macOS Quarantine
          Since this app is unsigned, macOS will quarantine it. You need to remove the quarantine flag:

          1. **Open Terminal** (found in Applications > Utilities)
          2. **Run the following command** (replace the path if you put the app elsewhere):
             ```bash
             xattr -cr /Applications/pucoti.app
             ```
             Or if you kept it in Downloads:
             ```bash
             xattr -cr ~/Downloads/pucoti.app
             ```

          ### Step 3: Launch the Application
          1. **Right-click** on `pucoti.app` and select **"Open"**
          2. macOS will show a security dialog - click **"Open"** to confirm
          3. The app should now launch normally

          ## Alternative Method (System Preferences)
          If the above doesn't work:
          1. Try to launch the app normally (it will be blocked)
          2. Go to **System Preferences** > **Security & Privacy** > **General**
          3. You'll see a message about `pucoti` being blocked
          4. Click **"Open Anyway"**

          ## Why is this necessary?

          - **Code Signing**: Apple requires applications to be digitally signed by registered developers
          - **Notarization**: Apple also requires apps to be notarized (scanned by Apple's servers)
          - **Cost & Complexity**: These processes require paid Apple Developer accounts and additional infrastructure
          - **Open Source**: Many open source projects distribute unsigned applications this way

          ## Is it safe?

          Yes! The unsigned status doesn't mean the application is unsafe:
          - The source code is publicly available and auditable
          - You can verify the build process in our GitHub Actions
          - The warning is purely about the lack of Apple's digital signature, not about malware

          ## Need Help?

          If you encounter issues:
          1. Check our GitHub Issues page
          2. Make sure you've followed all steps above
          3. Try running the Terminal command again
          4. Restart your Mac and try again

          ## Future Plans

          We're working on implementing proper code signing and notarization to make installation smoother in future releases.
          EOF
            fi
          done

      - name: Create release archives
        run: |
          cd dist

          # Linux archives
          if [ "${{ matrix.platform }}" = "linux" ]; then
            if [ -d "linux_x64" ]; then
              tar -czf pucoti-linux-x64.tar.gz linux_x64/
            fi
          fi

          # Windows archives
          if [ "${{ matrix.platform }}" = "win" ]; then
            if [ -d "win_x64" ]; then
              # Create zip archive
              7z a pucoti-windows-x64.zip win_x64/

              # Also create a simple folder structure for easier distribution
              mkdir -p pucoti-windows-x64-portable
              cp -r win_x64/* pucoti-windows-x64-portable/
              7z a pucoti-windows-x64-portable.zip pucoti-windows-x64-portable/
            fi
          fi

          # macOS archives
          if [ "${{ matrix.platform }}" = "mac" ]; then
            if [ -d "mac_x64" ]; then
              # Ensure INSTALLATION_GUIDE.md is at the root of the archive for visibility
              cp mac_x64/INSTALLATION_GUIDE.md ./INSTALLATION_GUIDE.md 2>/dev/null || true
              zip -r pucoti-mac-x64.zip mac_x64/ INSTALLATION_GUIDE.md
              rm -f ./INSTALLATION_GUIDE.md
            fi
            if [ -d "mac_arm64" ]; then
              # Ensure INSTALLATION_GUIDE.md is at the root of the archive for visibility
              cp mac_arm64/INSTALLATION_GUIDE.md ./INSTALLATION_GUIDE.md 2>/dev/null || true
              zip -r pucoti-mac-arm64.zip mac_arm64/ INSTALLATION_GUIDE.md
              rm -f ./INSTALLATION_GUIDE.md
            fi
            if [ -d "mac_universal" ]; then
              # Ensure INSTALLATION_GUIDE.md is at the root of the archive for visibility
              cp mac_universal/INSTALLATION_GUIDE.md ./INSTALLATION_GUIDE.md 2>/dev/null || true
              zip -r pucoti-mac-universal.zip mac_universal/ INSTALLATION_GUIDE.md
              rm -f ./INSTALLATION_GUIDE.md
            fi
          fi

      # Upload artifacts for all workflow runs
      - name: Upload Linux artifacts
        if: matrix.platform == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: pucoti-linux-builds
          path: |
            webapp/dist/pucoti-linux-x64.tar.gz
            webapp/dist/pucoti-linux-x64.AppImage
            webapp/dist/linux_x64/
          retention-days: 30

      - name: Upload Windows artifacts
        if: matrix.platform == 'win'
        uses: actions/upload-artifact@v4
        with:
          name: pucoti-windows-builds
          path: |
            webapp/dist/pucoti-windows-x64.zip
            webapp/dist/pucoti-windows-x64-portable.zip
            webapp/dist/win_x64/
          retention-days: 30

      - name: Upload macOS artifacts
        if: matrix.platform == 'mac'
        uses: actions/upload-artifact@v4
        with:
          name: pucoti-mac-builds
          path: |
            webapp/dist/pucoti-mac-*.zip
            webapp/dist/mac_*/
            webapp/dist/mac_*/INSTALLATION_GUIDE.md
          retention-days: 30

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Flatten artifacts
        run: |
          mkdir -p release-files
          # Move all release files to a flat directory
          find artifacts/ -name "*.tar.gz" -exec cp {} release-files/ \;
          find artifacts/ -name "*.AppImage" -exec cp {} release-files/ \;
          find artifacts/ -name "*.zip" -exec cp {} release-files/ \;
          ls -la release-files/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-files/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}