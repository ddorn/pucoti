name: Build Pucoti

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            asset_name_suffix: windows.exe
            pyinstaller_icon_path: packaging/windows/pucoti.ico
            path_separator: ";"
            final_asset_glob: "Pucoti-*-windows.exe"
          - os: ubuntu-latest
            asset_name_suffix: linux-x86_64.AppImage
            pyinstaller_icon_path: packaging/linux/pucoti.png
            path_separator: ":"
            final_asset_glob: "Pucoti-*-linux-x86_64.AppImage*"
          - os: macos-latest
            asset_name_suffix: macos.dmg
            pyinstaller_icon_path: packaging/macos/pucoti.icns
            path_separator: ":"
            final_asset_glob: "Pucoti-*-macos.dmg"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for git describe to get tags

      - name: Set artifact version environment variable
        id: set_version
        shell: bash
        run: |
          VERSION_NAME=""
          if [[ "${{ github.ref_type }}" == "tag" && -n "${{ github.ref_name }}" ]]; then
            echo "Using tag: ${{ github.ref_name }}"
            raw_tag_name="${{ github.ref_name }}"
            VERSION_NAME="${raw_tag_name#v}"
          else
            # Use git describe for a more informative dev version
            # Fallback to SHA if no tags are present
            VERSION_NAME=$(git describe --tags --always --dirty="-dev" 2>/dev/null || echo "0.0.0-dev-$(echo ${{ github.sha }} | cut -c1-7)")
            # Remove "v" prefix if git describe added it from a tag
            VERSION_NAME="${VERSION_NAME#v}"
            echo "Using dev version: ${VERSION_NAME}"
          fi
          echo "VERSION_NAME=${VERSION_NAME}" >> $GITHUB_ENV
          echo "version_name_output=${VERSION_NAME}" >> $GITHUB_OUTPUT
          echo "Derived version: ${VERSION_NAME}"

      - name: Set up uv
        uses: astral-sh/setup-uv@v1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          architecture: x64

      - name: Install dependencies
        shell: bash
        run: |
          uv venv
          # The following 'uv' commands will automatically use the .venv
          # created in the current directory by 'uv venv' above.
          # No explicit 'source' activation is needed for them.
          echo "Installing wheel, pyinstaller, setuptools with uv pip..."
          uv pip install --system wheel pyinstaller setuptools
          echo "Syncing project dependencies with uv sync..."
          uv sync --all-extras
          echo "Dependencies installed."

      - name: Prepare AppImage/DMG assets
        shell: bash
        run: |
          mkdir -p build_assets
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            cat <<EOF > build_assets/pucoti.desktop
          [Desktop Entry]
          Name=Pucoti
          Exec=Pucoti
          Icon=pucoti
          Type=Application
          Categories=Utility;
          EOF
            # Ensure the icon path in matrix.pyinstaller_icon_path is correct
            cp "${{ matrix.pyinstaller_icon_path }}" build_assets/pucoti.png
            echo "Desktop file and icon prepared for Linux."
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            # For DMG background (optional)
            # You might need to create a background image if you want one
            # mkdir -p build_assets/dmg_background
            # cp packaging/macos/dmg_background.png build_assets/dmg_background/background.png
            echo "DMG assets prepared for macOS (if any)."
          fi
        continue-on-error: true # Allow to continue if icon/packaging dir doesn't exist for a specific OS yet

      - name: Build with PyInstaller
        shell: bash
        run: |
          echo "Building with PyInstaller for ${{ matrix.os }} using icon path: '${{ matrix.pyinstaller_icon_path }}'"
          PY_ARGS=("--noconfirm" "--name" "Pucoti" "--clean")
          PY_ARGS+=("--add-data" "src/pucoti/assets${{ matrix.path_separator }}assets")

          if [ -f "${{ matrix.pyinstaller_icon_path }}" ]; then
            PY_ARGS+=("--icon" "${{ matrix.pyinstaller_icon_path }}")
          else
            echo "Warning: Icon not found at '${{ matrix.pyinstaller_icon_path }}'. Building without specific icon."
          fi

          if [[ "${{ runner.os }}" == "Windows" ]]; then
            PY_ARGS+=("--onefile" "--windowed")
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            PY_ARGS+=("--onedir" "--windowed")
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            PY_ARGS+=("--windowed")
            # Explicitly target x86_64, which should align with your Python and libs
            PY_ARGS+=("--target-arch" "x86_64")
            # PY_ARGS+=("--osx-bundle-identifier" "com.yourcompany.pucoti") # Optional
          fi

          PY_ARGS+=("src/pucoti/app.py")
          echo "Executing: uv run pyinstaller" "${PY_ARGS[@]}"
          uv run pyinstaller "${PY_ARGS[@]}"
          echo "PyInstaller build complete. Contents of dist/:"
          ls -R dist
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "Architecture of resulting macOS executable:"
            lipo -info "dist/Pucoti.app/Contents/MacOS/Pucoti" || echo "lipo check failed"
            echo "Info.plist for macOS app:"
            cat "dist/Pucoti.app/Contents/Info.plist" || echo "Info.plist not found or unreadable"
          fi
          # ... (rest of the PyInstaller build step)

      - name: Package macOS .app into DMG
        if: runner.os == 'macOS'
        shell: bash
        run: |
          APP_PATH="dist/Pucoti.app"
          DMG_NAME="Pucoti-${{ env.VERSION_NAME }}-${{ matrix.asset_name_suffix }}"

          echo "Checking for .app at ${APP_PATH}"
          if [ ! -d "$APP_PATH" ]; then
            echo "Error: Application bundle not found at $APP_PATH"
            ls -R dist
            exit 1
          fi

          # Log architecture again after all PyInstaller steps
          echo "Final architecture check of executable in .app:"
          lipo -info "${APP_PATH}/Contents/MacOS/Pucoti" || echo "lipo check failed for final app"

          # Install create-dmg
          echo "Attempting to install create-dmg if not found..."
          if ! command -v create-dmg &> /dev/null; then
            echo "create-dmg not found, attempting to install via Homebrew..."
            if ! command -v brew &> /dev/null; then
                echo "Error: Homebrew not found. Cannot install create-dmg."
                # Alternative: npm install -g create-dmg (less common on CI runners unless Node is set up)
                # Or use a setup action for create-dmg
                exit 1
            fi
            brew install create-dmg
          else
            echo "create-dmg found."
          fi

          echo "Attempting to ad-hoc sign the application bundle: ${APP_PATH}"
          # Ensure the executable itself is +x, PyInstaller usually handles this.
          chmod +x "${APP_PATH}/Contents/MacOS/Pucoti"
          codesign --force --deep --sign - "${APP_PATH}"
          # Verify signature (optional but good)
          codesign --verify --verbose=4 "${APP_PATH}" || echo "Codesign verification failed"
          # Gatekeeper assessment
          spctl --assess --type execute -v "${APP_PATH}" || echo "spctl assessment failed for ad-hoc signed app"


          echo "Creating DMG: $DMG_NAME for $APP_PATH"
          create-dmg \
            --volname "Pucoti Installer" \
            --app-drop-link 600 185 \
            "$DMG_NAME" \
            "$APP_PATH"

          if [ -f "$DMG_NAME" ]; then
            echo "DMG created successfully: $DMG_NAME"
          else
            echo "Error: DMG creation failed."
            ls -R .
            exit 1
          fi

      # Add the inspection step here if you didn't integrate parts of it earlier
      - name: Inspect and Verify macOS .app Bundle (Post DMG Creation)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          APP_PATH="dist/Pucoti.app" # Path to the .app BEFORE it's put in the DMG
          EXECUTABLE_PATH="${APP_PATH}/Contents/MacOS/Pucoti"
          DMG_NAME="Pucoti-${{ env.VERSION_NAME }}-${{ matrix.asset_name_suffix }}"

          echo "--- Verifying .app bundle structure (Source for DMG) ---"
          # ... (similar checks as proposed in Q1 answer) ...
          # This is redundant if you checked thoroughly before DMG creation,
          # but can be useful as a final sanity check on the source material.

          echo "--- Basic DMG check ---"
          if [ -f "$DMG_NAME" ]; then
            echo "DMG file $DMG_NAME exists. Size: $(ls -lh "$DMG_NAME" | awk '{print $5}')"
            # You could try to mount it and inspect, but that adds complexity
            # hdiutil attach "$DMG_NAME"
            # ls -R "/Volumes/Pucoti Installer" # Adjust volume name based on --volname
            # hdiutil detach "/Volumes/Pucoti Installer"
          else
            echo "Error: Final DMG file $DMG_NAME not found!"
            exit 1
          fi

      # --- OS-specific Packaging ---

      - name: Prepare Windows Executable Asset
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $FinalAssetName = "Pucoti-${{ env.VERSION_NAME }}-${{ matrix.asset_name_suffix }}" # e.g., Pucoti-1.0.0-windows.exe
          $SourceFile = "dist/Pucoti.exe" # PyInstaller output

          echo "Preparing Windows asset: $FinalAssetName from $SourceFile"

          if (-not (Test-Path $SourceFile)) {
            echo "Error: PyInstaller output executable not found at $SourceFile"
            echo "Contents of dist/:"
            Get-ChildItem -Path "dist" -Recurse -ErrorAction SilentlyContinue | Select-Object FullName, Length, LastWriteTime
            exit 1
          }

          Copy-Item -Path $SourceFile -Destination $FinalAssetName -Force
          echo "Windows executable asset prepared as: $FinalAssetName"

          echo "Listing current directory contents to verify the asset:"
          Get-ChildItem -Path "." | Where-Object Name -eq $FinalAssetName

      - name: Prepare AppDir for AppImage (Linux only)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          APPDIR_NAME="Pucoti.AppDir"
          # PyInstaller's one-dir output (e.g., dist/Pucoti)
          PYINSTALLER_ONEDIR_OUTPUT="dist/Pucoti"
          # This is the executable *inside* that output dir (e.g., Pucoti)
          PUCOTI_EXEC_NAME_IN_DIR="Pucoti"

          echo "Checking for PyInstaller output at $PYINSTALLER_ONEDIR_OUTPUT"
          if [ ! -d "$PYINSTALLER_ONEDIR_OUTPUT" ]; then
            echo "Error: PyInstaller one-dir output not found at $PYINSTALLER_ONEDIR_OUTPUT"
            ls -R dist
            exit 1
          fi
          if [ ! -f "$PYINSTALLER_ONEDIR_OUTPUT/$PUCOTI_EXEC_NAME_IN_DIR" ]; then
            echo "Error: Executable $PUCOTI_EXEC_NAME_IN_DIR not found in $PYINSTALLER_ONEDIR_OUTPUT"
            ls -R "$PYINSTALLER_ONEDIR_OUTPUT"
            exit 1
          fi

          echo "Creating AppDir structure at $APPDIR_NAME"
          mkdir -p "$APPDIR_NAME/usr/bin"
          mkdir -p "$APPDIR_NAME/usr/share/applications"
          mkdir -p "$APPDIR_NAME/usr/share/icons/hicolor/scalable/apps" # Or specific size like 64x64

          echo "Copying PyInstaller output to AppDir..."
          # Copy the *contents* of PyInstaller's one-dir output into the AppDir.
          cp -r "$PYINSTALLER_ONEDIR_OUTPUT"/* "$APPDIR_NAME/"


          echo "Copying .desktop file"
          cp "build_assets/pucoti.desktop" "$APPDIR_NAME/pucoti.desktop"
          # Symlink for menu integration
          ln -s "../../../pucoti.desktop" "$APPDIR_NAME/usr/share/applications/pucoti.desktop"

          echo "Copying icon file"
          cp "build_assets/pucoti.png" "$APPDIR_NAME/pucoti.png"
          # Symlink for menu integration
          ln -s "../../../../pucoti.png" "$APPDIR_NAME/usr/share/icons/hicolor/scalable/apps/pucoti.png"
          # cp "build_assets/pucoti.png" "$APPDIR_NAME/usr/share/icons/hicolor/64x64/apps/pucoti.png" # If using fixed size


          echo "Creating AppRun script"
          cat > "$APPDIR_NAME/AppRun" <<EOF
          #!/bin/bash
          APPDIR=\$(dirname "\$(readlink -f "\$0")")
          # Ensure libraries from the AppDir are preferred
          export LD_LIBRARY_PATH="\$APPDIR/usr/lib:\$APPDIR:\$LD_LIBRARY_PATH" # Added APPDIR to LD_LIBRARY_PATH for libs in root of AppDir
          # Execute the main application binary (which is now in the root of AppDir)
          exec "\$APPDIR/${PUCOTI_EXEC_NAME_IN_DIR}" "\$@"
          EOF
          chmod +x "$APPDIR_NAME/AppRun"

          echo "AppDir preparation complete. Contents of $APPDIR_NAME (top level):"
          ls "$APPDIR_NAME"
          echo "Contents of $APPDIR_NAME/usr/bin (should be empty if main exec is in AppDir root):"
          ls "$APPDIR_NAME/usr/bin"

      - name: Install FUSE for AppImage (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2

      - name: Download and Build AppImage (Linux only)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          APPDIR_NAME="Pucoti.AppDir"
          ARCH="x86_64" # Or detect dynamically if needed
          APPIMAGE_FILENAME="Pucoti-${{ env.VERSION_NAME }}-${{ matrix.asset_name_suffix }}"

          # Download appimagetool
          APPIMAGETOOL_URL=$(wget -q "https://api.github.com/repos/AppImage/AppImageKit/releases/latest" -O - | grep "browser_download_url.*appimagetool-x86_64.AppImage" | head -n 1 | cut -d '"' -f 4)
          if [ -z "$APPIMAGETOOL_URL" ]; then
            echo "Failed to get appimagetool download URL from latest release. Using fallback."
            APPIMAGETOOL_URL="https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          fi
          wget -q "$APPIMAGETOOL_URL" -O appimagetool.AppImage
          chmod +x appimagetool.AppImage
          ./appimagetool.AppImage --version

          # Set environment variables for appimagetool (for updates, version embedding)
          export VERSION="${{ env.VERSION_NAME }}"
          # For GitHub releases: owner, repo, tag_prefix, filename_pattern
          # Use 'gh-releases-zsync|OWNER|REPO|latest|Pucoti-*-linux-x86_64.AppImage.zsync'
          export UPDATE_INFO="gh-releases-zsync|${{ github.repository_owner }}|${{ github.event.repository.name }}|latest|Pucoti-*-${ARCH}.AppImage.zsync"

          echo "Building AppImage from $APPDIR_NAME with VERSION=$VERSION to $APPIMAGE_FILENAME"
          # The -u option is for update information. Use --appimage-extract-and-run if appimagetool supports it and it's preferred
          # It's safer to use the standard call unless --appimage-extract-and-run is specifically needed and tested
          ./appimagetool.AppImage -u "$UPDATE_INFO" "$APPDIR_NAME" "$APPIMAGE_FILENAME"

          if [ -f "$APPIMAGE_FILENAME" ]; then
            echo "AppImage created successfully: $APPIMAGE_FILENAME"
            if [ -f "${APPIMAGE_FILENAME}.zsync" ]; then
              echo "Zsync file also created: ${APPIMAGE_FILENAME}.zsync"
            fi
          else
            echo "Error: appimagetool did not create $APPIMAGE_FILENAME!"
            ls -la .
            exit 1
          fi

      - name: List final files before upload
        shell: bash
        run: |
          echo "Files matching glob '${{ matrix.final_asset_glob }}':"
          ls -la ${{ matrix.final_asset_glob }} || echo "No files found for glob."
          echo "Current directory contents:"
          ls -lA

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Pucoti-${{ env.VERSION_NAME }}-${{ matrix.os }}
          path: ${{ matrix.final_asset_glob }}
          if-no-files-found: error

      - name: Create Release and Upload Assets
        # This step only runs on tag pushes
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          # draft: true
          files: |
            ${{ matrix.final_asset_glob }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
